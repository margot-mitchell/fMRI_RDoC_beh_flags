name: Process Data

on:
  workflow_dispatch:
    inputs:
      subject_folder:
        description: 'Subject folder to process (e.g., sub-sM) - use for single subject/session processing'
        required: false
        type: string
      session_names:
        description: 'Comma-separated list of sessions to process (e.g., ses-1,ses-2,ses-pretouch) - leave empty to process all sessions for the subject'
        required: false
        type: string
      process_all:
        description: 'Process all subjects in parallel'
        required: false
        type: boolean
        default: false
      specific_subjects:
        description: 'Process specific subjects (comma-separated list, e.g., sub-sM,sub-sN,sub-sO) - leave empty if using other options'
        required: false
        type: string

jobs:
  get-subjects:
    runs-on: ubuntu-latest
    outputs:
      subjects: ${{ steps.get-subjects.outputs.subjects }}
      sessions: ${{ steps.get-subjects.outputs.sessions }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          rclone --version
      
      - name: Configure rclone
        run: |
          echo "Setting up rclone configuration..."
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          
      - name: Sync data from Dropbox
        run: |
          echo "Syncing data from Dropbox to get subject list..."
          mkdir -p output/raw
          rclone sync rdoc_dropbox:rdoc_fmri_behavior/output/raw/ output/raw/ --progress
          
      - name: Get subject and session list
        id: get-subjects
        run: |
          if [ "${{ github.event.inputs.process_all }}" = "true" ]; then
            subjects=$(find output/raw -maxdepth 1 -type d -name "sub-*" -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
            echo "subjects=$subjects" >> $GITHUB_OUTPUT
            echo "sessions=[\"\"]" >> $GITHUB_OUTPUT
            echo "Processing all subjects: $subjects"
          elif [ -n "${{ github.event.inputs.specific_subjects }}" ]; then
            subjects=$(echo "${{ github.event.inputs.specific_subjects }}" | tr ',' '\n' | grep -v '^[[:space:]]*$' | jq -R -s -c 'split("\n")[:-1]')
            echo "subjects=$subjects" >> $GITHUB_OUTPUT
            echo "sessions=[\"\"]" >> $GITHUB_OUTPUT
            echo "Processing specific subjects: $subjects"
          elif [ -n "${{ github.event.inputs.subject_folder }}" ]; then
            subject="${{ github.event.inputs.subject_folder }}"
            session_names="${{ github.event.inputs.session_names }}"
            if [ -n "$session_names" ]; then
              # Parse comma-separated list into JSON array, filter out empty or whitespace-only strings
              IFS=',' read -ra session_arr <<< "$session_names"
              sessions=$(printf '%s\n' "${session_arr[@]}" | grep -v '^[[:space:]]*$' | jq -R -s -c 'split("\n")[:-1]')
              echo "subjects=[\"$subject\"]" >> $GITHUB_OUTPUT
              echo "sessions=$sessions" >> $GITHUB_OUTPUT
              echo "Processing single subject and sessions: $subject/$sessions"
            else
              echo "subjects=[\"$subject\"]" >> $GITHUB_OUTPUT
              echo "sessions=[\"\"]" >> $GITHUB_OUTPUT
              echo "Processing single subject (all sessions): $subject"
            fi
          else
            echo "Error: No valid option selected. Please choose one of: process_all, specific_subjects, or subject_folder"
            exit 1
          fi

  process-data:
    needs: get-subjects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subject: ${{ fromJson(needs.get-subjects.outputs.subjects) }}
        session: ${{ fromJson(needs.get-subjects.outputs.sessions) }}
      fail-fast: false  # Continue processing other subjects if one fails
    steps:
      - uses: actions/checkout@v4
      
      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          rclone --version
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Create virtual environment
        run: |
          echo "Creating virtual environment..."
          python -m venv .venv
          echo "Activating virtual environment..."
          source .venv/bin/activate
          echo "Python path:"
          which python
          echo "Installing pip in virtual environment..."
          curl -sS https://bootstrap.pypa.io/get-pip.py | python
          echo "Installing requirements..."
          pip install -r requirements.txt
          
      - name: Configure rclone
        run: |
          echo "Setting up rclone configuration..."
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          
          echo "Verifying rclone configuration..."
          echo "Configuration file exists:"
          ls -l ~/.config/rclone/rclone.conf
          echo "Configuration file contents (without sensitive data):"
          grep -v "token" ~/.config/rclone/rclone.conf
          echo "Available remotes:"
          rclone listremotes
          
      - name: Test Dropbox connection
        run: |
          echo "Testing Dropbox connection..."
          rclone lsd rdoc_dropbox: || {
            echo "Error: Could not list Dropbox root directory"
            exit 1
          }
          echo "Successfully connected to Dropbox"
          
          # List what's available for the specific subject
          if [ -n "${{ matrix.subject }}" ]; then
            echo "Available sessions for ${{ matrix.subject }} in Dropbox:"
            rclone lsd rdoc_dropbox:rdoc_fmri_behavior/output/raw/${{ matrix.subject }}/ 2>/dev/null || echo "Subject not found in Dropbox"
          fi
          
      - name: Create directory structure
        run: |
          echo "Creating required directories..."
          mkdir -p output/raw
          mkdir -p preprocessed_data
          mkdir -p results/metrics
          mkdir -p results/flags
          echo "Directory structure created:"
          tree -L 2
          
      - name: Sync data from Dropbox
        run: |
          source .venv/bin/activate
          echo "Syncing data from Dropbox..."
          
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            # Sync only the specific session
            echo "Syncing only session ${{ matrix.session }} for ${{ matrix.subject }}"
            mkdir -p output/raw/${{ matrix.subject }}
            
            # Debug: Show the exact command
            SOURCE_PATH="rdoc_dropbox:rdoc_fmri_behavior/output/raw/${{ matrix.subject }}/${{ matrix.session }}/"
            DEST_PATH="output/raw/${{ matrix.subject }}/${{ matrix.session }}/"
            
            # Clean up any potential whitespace issues
            SOURCE_PATH=$(echo "$SOURCE_PATH" | tr -d ' ')
            DEST_PATH=$(echo "$DEST_PATH" | tr -d ' ')
            
            echo "Source: '$SOURCE_PATH'"
            echo "Dest: '$DEST_PATH'"
            echo "Executing: rclone sync '$SOURCE_PATH' '$DEST_PATH' --progress"
            
            rclone sync "$SOURCE_PATH" "$DEST_PATH" --progress
          else
            # Sync entire subject folder
            echo "Syncing entire subject folder"
            rclone sync rdoc_dropbox:rdoc_fmri_behavior/output/raw/ output/raw/ --progress
          fi
          
          echo "Verifying sync completed..."
          echo "Contents of output/raw:"
          ls -la output/raw/
          
          if [ -n "${{ matrix.subject }}" ]; then
            echo "Contents of ${{ matrix.subject }} directory:"
            ls -la output/raw/${{ matrix.subject }}/ || echo "Subject directory not found"
          fi
          
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            echo "Checking for session ${{ matrix.session }} in ${{ matrix.subject }}:"
            ls -la output/raw/${{ matrix.subject }}/${{ matrix.session }}/ 2>/dev/null || echo "Session directory not found"
          fi
          
      - name: Check session validity
        run: |
          echo "Checking session validity..."
          echo "Subject: ${{ matrix.subject }}"
          echo "Session: '${{ matrix.session }}'"
          
          # Only check for empty sessions when we're supposed to be processing specific sessions
          # Empty sessions are valid when processing all sessions for a subject
          if [ "${{ github.event.inputs.subject_folder }}" != "" ] && [ "${{ github.event.inputs.session_names }}" != "" ]; then
            if [ -z "${{ matrix.session }}" ] || [ "${{ matrix.session }}" = "" ]; then
              echo "ERROR: Empty session name detected when processing specific sessions."
              echo "This should not happen with proper filtering."
              echo "Exiting to prevent artifact directory issues."
              exit 1
            fi
          fi
          
          echo "Session is valid, proceeding with processing..."
          
      - name: Process subject ${{ matrix.subject }} session ${{ matrix.session }}
        run: |
          source .venv/bin/activate
          echo "Processing subject: ${{ matrix.subject }}"
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            echo "Processing specific session: ${{ matrix.session }}"
            python preprocess.py ${{ matrix.subject }} --session ${{ matrix.session }}
            python calculate_metrics.py ${{ matrix.subject }} --session ${{ matrix.session }}
            python generate_flags.py ${{ matrix.subject }} --session ${{ matrix.session }}
          else
            echo "Processing all sessions for subject"
            python preprocess.py ${{ matrix.subject }}
            python calculate_metrics.py ${{ matrix.subject }}
            python generate_flags.py ${{ matrix.subject }}
          fi
          
      - name: Test metrics completeness
        run: |
          source .venv/bin/activate
          echo "Testing metrics completeness for ${{ matrix.subject }}"
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            echo "Testing specific session: ${{ matrix.session }}"
            python test_metrics_completeness.py ${{ matrix.subject }} --session ${{ matrix.session }}
          else
            echo "Testing all sessions for subject"
            python test_metrics_completeness.py ${{ matrix.subject }}
          fi
          
      - name: Organize results for artifact
        run: |
          echo "Organizing results for artifact upload..."
          
          # Create clean artifact structure - use consistent naming logic
          # Handle empty session names properly to prevent malformed artifact names
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ] && [ "${{ matrix.session }}" != "null" ]; then
            artifact_name="${{ matrix.subject }}-${{ matrix.session }}_results"
          else
            artifact_name="${{ matrix.subject }}_results"
          fi
          
          # Validate artifact name to prevent malformed directory names
          if [[ "$artifact_name" =~ [^-a-zA-Z0-9_] ]] || [[ "$artifact_name" =~ ^- ]] || [[ "$artifact_name" =~ -$ ]]; then
            echo "ERROR: Invalid artifact name '$artifact_name' detected. Using fallback name."
            artifact_name="${{ matrix.subject }}_results"
          fi
          
          echo "Using artifact name: $artifact_name"
          mkdir -p artifacts/$artifact_name
          
          # Copy preprocessed data (session-specific)
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            # For session-specific processing, only copy files for this session
            if [ -d "preprocessed_data/${{ matrix.subject }}" ]; then
              mkdir -p artifacts/$artifact_name/preprocessed_data
              # Copy only files for this specific session
              for task_dir in preprocessed_data/${{ matrix.subject }}/*/; do
                if [ -d "$task_dir" ]; then
                  task_name=$(basename "$task_dir")
                  mkdir -p artifacts/$artifact_name/preprocessed_data/$task_name
                  # Copy only files containing this session
                  find "$task_dir" -name "*${{ matrix.session }}*" -type f -exec cp {} artifacts/$artifact_name/preprocessed_data/$task_name/ \;
                fi
              done
              echo "Copied session-specific preprocessed data to artifacts/$artifact_name/preprocessed_data/"
            fi
          else
            # For all sessions processing, copy everything
            if [ -d "preprocessed_data/${{ matrix.subject }}" ]; then
              mkdir -p artifacts/$artifact_name/preprocessed_data
              cp -r preprocessed_data/${{ matrix.subject }}/* artifacts/$artifact_name/preprocessed_data/
              echo "Copied all preprocessed data to artifacts/$artifact_name/preprocessed_data/"
            fi
          fi
          
          # Copy metrics with proper folder structure
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            # For session-specific processing, create subject/session/metrics structure
            if [ -d "results/metrics/${{ matrix.subject }}" ]; then
              mkdir -p artifacts/$artifact_name/results/${{ matrix.subject }}/${{ matrix.session }}/metrics
              # Copy all CSV files for this subject (they contain the session data)
              find "results/metrics/${{ matrix.subject }}" -name "*.csv" -type f -exec cp {} artifacts/$artifact_name/results/${{ matrix.subject }}/${{ matrix.session }}/metrics/ \;
              echo "Copied session-specific metrics to artifacts/$artifact_name/results/${{ matrix.subject }}/${{ matrix.session }}/metrics/"
            fi
          else
            # For all sessions processing, copy everything with subject structure
            if [ -d "results/metrics/${{ matrix.subject }}" ]; then
              mkdir -p artifacts/$artifact_name/results/${{ matrix.subject }}/metrics
              cp -r results/metrics/${{ matrix.subject }}/* artifacts/$artifact_name/results/${{ matrix.subject }}/metrics/
              echo "Copied all metrics to artifacts/$artifact_name/results/${{ matrix.subject }}/metrics/"
            fi
          fi
          
          # Copy flags with proper folder structure - only if flags exist
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            # For session-specific processing, create subject/session/flags structure
            if [ -d "results/flags/${{ matrix.subject }}" ]; then
              mkdir -p artifacts/$artifact_name/results/${{ matrix.subject }}/${{ matrix.session }}/flags
              # Copy all flag files for this subject (they contain the session data)
              find "results/flags/${{ matrix.subject }}" -name "*" -type f -exec cp {} artifacts/$artifact_name/results/${{ matrix.subject }}/${{ matrix.session }}/flags/ \;
              echo "Copied session-specific flags to artifacts/$artifact_name/results/${{ matrix.subject }}/${{ matrix.session }}/flags/"
            fi
          else
            # For all sessions processing, copy everything with subject structure
            if [ -d "results/flags/${{ matrix.subject }}" ] && [ "$(ls -A results/flags/${{ matrix.subject }}/ 2>/dev/null)" ]; then
              mkdir -p artifacts/$artifact_name/results/${{ matrix.subject }}/flags
              cp -r results/flags/${{ matrix.subject }}/* artifacts/$artifact_name/results/${{ matrix.subject }}/flags/
              echo "Copied all flags to artifacts/$artifact_name/results/${{ matrix.subject }}/flags/"
            else
              echo "No flags found for ${{ matrix.subject }} - this is good (no quality control issues detected)"
            fi
          fi
          
          echo "Artifact structure created:"
          tree artifacts/$artifact_name || ls -la artifacts/$artifact_name
          
          # Set the artifact name for use in subsequent steps
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ] && [ "${{ matrix.session }}" != "null" ]; then
            echo "artifact_name=${{ matrix.subject }}-${{ matrix.session }}_results" >> $GITHUB_ENV
          else
            echo "artifact_name=${{ matrix.subject }}_results" >> $GITHUB_ENV
          fi
          
          # Validate the artifact name in the environment variable too
          if [[ "${{ env.artifact_name }}" =~ [^-a-zA-Z0-9_] ]] || [[ "${{ env.artifact_name }}" =~ ^- ]] || [[ "${{ env.artifact_name }}" =~ -$ ]]; then
            echo "ERROR: Invalid artifact name in env var '${{ env.artifact_name }}'. Using fallback."
            echo "artifact_name=${{ matrix.subject }}_results" >> $GITHUB_ENV
          fi
          
      - name: Prepare artifact for upload
        run: |
          echo "Checking if artifact directory exists and has content..."
          if [ -d "artifacts/${{ env.artifact_name }}" ]; then
            echo "Artifact directory exists: artifacts/${{ env.artifact_name }}"
            echo "Contents:"
            ls -la artifacts/${{ env.artifact_name }}/
            
            # Check if directory has any content
            if [ "$(ls -A artifacts/${{ env.artifact_name }}/ 2>/dev/null)" ]; then
              echo "Artifact directory has content, proceeding with upload..."
              # Create a simple file to ensure the directory is not empty
              echo "Processing completed for ${{ matrix.subject }}" > artifacts/${{ env.artifact_name }}/processing_summary.txt
            else
              echo "Artifact directory is empty, creating placeholder..."
              echo "No data was processed for ${{ matrix.subject }}" > artifacts/${{ env.artifact_name }}/no_data_processed.txt
            fi
          else
            echo "Artifact directory does not exist, creating it with placeholder..."
            mkdir -p artifacts/${{ env.artifact_name }}
            echo "No data was processed for ${{ matrix.subject }}" > artifacts/${{ env.artifact_name }}/no_data_processed.txt
          fi
          
          echo "Final artifact structure:"
          tree artifacts/${{ env.artifact_name }} || ls -la artifacts/${{ env.artifact_name }}/
          
      - name: Upload results for ${{ matrix.subject }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact_name }}
          path: artifacts/${{ env.artifact_name }}/
          if-no-files-found: warn 