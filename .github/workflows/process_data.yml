name: Process Data

on:
  workflow_dispatch:
    inputs:
      subject_folder:
        description: 'Subject folder to process (e.g., sub-sM) - use for single subject/session processing'
        required: false
        type: string
      session_names:
        description: 'Comma-separated list of sessions to process (e.g., ses-1,ses-2,ses-pretouch) - leave empty to process all sessions for the subject'
        required: false
        type: string
      process_all:
        description: 'Process all subjects in parallel'
        required: false
        type: boolean
        default: false
      specific_subjects:
        description: 'Process specific subjects (comma-separated list, e.g., sub-sM,sub-sN,sub-sO) - leave empty if using other options'
        required: false
        type: string

jobs:
  get-subjects:
    runs-on: ubuntu-latest
    outputs:
      subjects: ${{ steps.get-subjects.outputs.subjects }}
      sessions: ${{ steps.get-subjects.outputs.sessions }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          rclone --version
      
      - name: Configure rclone
        run: |
          echo "Setting up rclone configuration..."
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          
      - name: Sync data from Dropbox
        run: |
          echo "Syncing data from Dropbox to get subject list..."
          mkdir -p output/raw
          rclone sync rdoc_dropbox:rdoc_fmri_behavior/output/raw/ output/raw/ --progress
          
      - name: Get subject and session list
        id: get-subjects
        run: |
          if [ "${{ github.event.inputs.process_all }}" = "true" ]; then
            subjects=$(find output/raw -maxdepth 1 -type d -name "sub-*" -exec basename {} \; | jq -R -s -c 'split("\n")[:-1]')
            echo "subjects=$subjects" >> $GITHUB_OUTPUT
            echo "sessions=[\"\"]" >> $GITHUB_OUTPUT
            echo "Processing all subjects: $subjects"
          elif [ -n "${{ github.event.inputs.specific_subjects }}" ]; then
            subjects=$(echo "${{ github.event.inputs.specific_subjects }}" | tr ',' '\n' | jq -R -s -c 'split("\n")[:-1]')
            echo "subjects=$subjects" >> $GITHUB_OUTPUT
            echo "sessions=[\"\"]" >> $GITHUB_OUTPUT
            echo "Processing specific subjects: $subjects"
          elif [ -n "${{ github.event.inputs.subject_folder }}" ]; then
            subject="${{ github.event.inputs.subject_folder }}"
            session_names="${{ github.event.inputs.session_names }}"
            if [ -n "$session_names" ]; then
              # Parse comma-separated list into JSON array
              IFS=',' read -ra session_arr <<< "$session_names"
              sessions=$(printf '%s\n' "${session_arr[@]}" | jq -R -s -c 'split("\n")[:-1]')
              echo "subjects=[\"$subject\"]" >> $GITHUB_OUTPUT
              echo "sessions=$sessions" >> $GITHUB_OUTPUT
              echo "Processing single subject and sessions: $subject/$sessions"
            else
              echo "subjects=[\"$subject\"]" >> $GITHUB_OUTPUT
              echo "sessions=[\"\"]" >> $GITHUB_OUTPUT
              echo "Processing single subject (all sessions): $subject"
            fi
          else
            echo "Error: No valid option selected. Please choose one of: process_all, specific_subjects, or subject_folder"
            exit 1
          fi

  process-data:
    needs: get-subjects
    runs-on: ubuntu-latest
    strategy:
      matrix:
        subject: ${{ fromJson(needs.get-subjects.outputs.subjects) }}
        session: ${{ fromJson(needs.get-subjects.outputs.sessions) }}
      fail-fast: false  # Continue processing other subjects if one fails
    steps:
      - uses: actions/checkout@v4
      
      - name: Install rclone
        run: |
          curl https://rclone.org/install.sh | sudo bash
          rclone --version
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'
          
      - name: Create virtual environment
        run: |
          echo "Creating virtual environment..."
          python -m venv .venv
          echo "Activating virtual environment..."
          source .venv/bin/activate
          echo "Python path:"
          which python
          echo "Installing pip in virtual environment..."
          curl -sS https://bootstrap.pypa.io/get-pip.py | python
          echo "Installing requirements..."
          pip install -r requirements.txt
          
      - name: Configure rclone
        run: |
          echo "Setting up rclone configuration..."
          mkdir -p ~/.config/rclone
          echo "${{ secrets.RCLONE_CONFIG }}" | base64 -d > ~/.config/rclone/rclone.conf
          chmod 600 ~/.config/rclone/rclone.conf
          
          echo "Verifying rclone configuration..."
          echo "Configuration file exists:"
          ls -l ~/.config/rclone/rclone.conf
          echo "Configuration file contents (without sensitive data):"
          grep -v "token" ~/.config/rclone/rclone.conf
          echo "Available remotes:"
          rclone listremotes
          
      - name: Test Dropbox connection
        run: |
          echo "Testing Dropbox connection..."
          rclone lsd rdoc_dropbox: || {
            echo "Error: Could not list Dropbox root directory"
            exit 1
          }
          echo "Successfully connected to Dropbox"
          
          # List what's available for the specific subject
          if [ -n "${{ matrix.subject }}" ]; then
            echo "Available sessions for ${{ matrix.subject }} in Dropbox:"
            rclone lsd rdoc_dropbox:rdoc_fmri_behavior/output/raw/${{ matrix.subject }}/ 2>/dev/null || echo "Subject not found in Dropbox"
          fi
          
      - name: Create directory structure
        run: |
          echo "Creating required directories..."
          mkdir -p output/raw
          mkdir -p preprocessed_data
          mkdir -p results/metrics
          mkdir -p results/flags
          echo "Directory structure created:"
          tree -L 2
          
      - name: Sync data from Dropbox
        run: |
          source .venv/bin/activate
          echo "Syncing data from Dropbox..."
          rclone sync rdoc_dropbox:rdoc_fmri_behavior/output/raw/ output/raw/ --progress
          
          echo "Verifying sync completed..."
          echo "Contents of output/raw:"
          ls -la output/raw/
          
          if [ -n "${{ matrix.subject }}" ]; then
            echo "Contents of ${{ matrix.subject }} directory:"
            ls -la output/raw/${{ matrix.subject }}/ || echo "Subject directory not found"
          fi
          
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            echo "Checking for session ${{ matrix.session }} in ${{ matrix.subject }}:"
            ls -la output/raw/${{ matrix.subject }}/${{ matrix.session }}/ 2>/dev/null || echo "Session directory not found"
          fi
          
      - name: Process subject ${{ matrix.subject }} session ${{ matrix.session }}
        run: |
          source .venv/bin/activate
          echo "Processing subject: ${{ matrix.subject }}"
          if [ -n "${{ matrix.session }}" ] && [ "${{ matrix.session }}" != "" ]; then
            echo "Processing specific session: ${{ matrix.session }}"
            python preprocess.py ${{ matrix.subject }} --session ${{ matrix.session }}
            python calculate_metrics.py ${{ matrix.subject }} --session ${{ matrix.session }}
            python generate_flags.py ${{ matrix.subject }} --session ${{ matrix.session }}
          else
            echo "Processing all sessions for subject"
            python preprocess.py ${{ matrix.subject }}
            python calculate_metrics.py ${{ matrix.subject }}
            python generate_flags.py ${{ matrix.subject }}
          fi
          
      - name: Upload results for ${{ matrix.subject }}
        uses: actions/upload-artifact@v4
        with:
          name: processed-data-${{ matrix.subject }}${{ matrix.session != '' && format('-{0}', matrix.session) || '' }}
          path: |
            results/metrics/${{ matrix.subject }}/
            results/flags/${{ matrix.subject }}/
            preprocessed_data/${{ matrix.subject }}/
          if-no-files-found: error 